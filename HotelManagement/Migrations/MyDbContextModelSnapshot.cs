// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace HotelManagement.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EmployeeInstanceHotelInstance", b =>
                {
                    b.Property<uint>("EmployeeInstancesID")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("HotelInstancesID")
                        .HasColumnType("int unsigned");

                    b.HasKey("EmployeeInstancesID", "HotelInstancesID");

                    b.HasIndex("HotelInstancesID");

                    b.ToTable("EmployeeInstanceHotelInstance");
                });

            modelBuilder.Entity("Models.Tables.Administration", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("Account")
                        .IsUnique();

                    b.ToTable("Administrations");
                });

            modelBuilder.Entity("Models.Tables.Award", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Consignee")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Goods")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<uint>("GoodsPoints")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("UserID")
                        .HasColumnType("int unsigned");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("Models.Tables.CheckInRecord", b =>
                {
                    b.Property<ulong>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTimeOffset>("CheckInTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("CheckOutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("Deposit")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ExtraExpense")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("ReserveOrderID")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("ResidentInformation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<uint>("RoomID")
                        .HasColumnType("int unsigned");

                    b.HasKey("ID");

                    b.HasIndex("ReserveOrderID");

                    b.HasIndex("RoomID");

                    b.ToTable("CheckInRecords");
                });

            modelBuilder.Entity("Models.Tables.CompanyGroup", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("GroupName")
                        .IsUnique();

                    b.ToTable("CompanyGroups");
                });

            modelBuilder.Entity("Models.Tables.EmployeeInstance", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IdentityCardId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IdentityCardType")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeName", "IdentityCardType", "IdentityCardId")
                        .IsUnique();

                    b.ToTable("EmployeeInstances");
                });

            modelBuilder.Entity("Models.Tables.HotelInstance", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("CompanyGroupID")
                        .HasColumnType("int unsigned");

                    b.Property<string>("ContactList")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("HotelAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyGroupID");

                    b.ToTable("HotelInstances");
                });

            modelBuilder.Entity("Models.Tables.Order", b =>
                {
                    b.Property<ulong>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Evaluate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("Grade")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("GuestRoomID")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Pictures")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("PlatOrderNumber")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<uint>("Price")
                        .HasColumnType("int unsigned");

                    b.Property<DateTimeOffset>("ProduceTime")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("RefoundValue")
                        .HasColumnType("int unsigned");

                    b.Property<DateTimeOffset>("ReserveCheckInTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("ReserveCheckOutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("RoomAmount")
                        .HasColumnType("int unsigned");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<uint>("UserID")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Videos")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("ID");

                    b.HasIndex("GuestRoomID");

                    b.HasIndex("UUID")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.HasIndex("Platform", "PlatOrderNumber")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Models.Tables.ReserveOrder", b =>
                {
                    b.Property<ulong>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTimeOffset>("LockEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("LockStartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("OrderID")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<uint>("RoomID")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("UserID")
                        .HasColumnType("int unsigned");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("RoomID");

                    b.HasIndex("UserID");

                    b.ToTable("ReserveOrders");
                });

            modelBuilder.Entity("Models.Tables.Room", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<ushort>("Area")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<uint>("HotelInstanceID")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Ichnography")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<uint>("Price")
                        .HasColumnType("int unsigned");

                    b.Property<int>("RoomStatus")
                        .HasColumnType("int");

                    b.Property<int>("RoomType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("ID");

                    b.HasIndex("HotelInstanceID");

                    b.HasIndex("Address", "Title")
                        .IsUnique();

                    b.ToTable("Room");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Room");
                });

            modelBuilder.Entity("Models.Tables.User", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Coupon")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("IDNumber")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<uint>("Points")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Subscription")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("ID");

                    b.HasIndex("Account")
                        .IsUnique();

                    b.HasIndex("IDNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Tables.GuestRoom", b =>
                {
                    b.HasBaseType("Models.Tables.Room");

                    b.Property<uint>("BedCount")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("CondomCount")
                        .HasColumnType("int unsigned");

                    b.Property<int>("GuestRoomType")
                        .HasColumnType("int");

                    b.Property<uint>("MineralWaterCount")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("WindowCount")
                        .HasColumnType("int unsigned");

                    b.HasDiscriminator().HasValue("GuestRoom");
                });

            modelBuilder.Entity("Models.Tables.GymRoom", b =>
                {
                    b.HasBaseType("Models.Tables.Room");

                    b.Property<uint>("EquipmentCount")
                        .HasColumnType("int unsigned");

                    b.Property<string>("EquipmentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("GymRoom");
                });

            modelBuilder.Entity("Models.Tables.LaundryRoom", b =>
                {
                    b.HasBaseType("Models.Tables.Room");

                    b.Property<uint>("WasherCount")
                        .HasColumnType("int unsigned");

                    b.HasDiscriminator().HasValue("LaundryRoom");
                });

            modelBuilder.Entity("Models.Tables.MeetingRoom", b =>
                {
                    b.HasBaseType("Models.Tables.Room");

                    b.Property<uint>("SeatCount")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SocketCount")
                        .HasColumnType("int unsigned");

                    b.HasDiscriminator().HasValue("MeetingRoom");
                });

            modelBuilder.Entity("Models.Tables.StaffRoom", b =>
                {
                    b.HasBaseType("Models.Tables.Room");

                    b.Property<uint>("BedCount")
                        .HasColumnType("int unsigned")
                        .HasColumnName("StaffRoom_BedCount");

                    b.HasDiscriminator().HasValue("StaffRoom");
                });

            modelBuilder.Entity("EmployeeInstanceHotelInstance", b =>
                {
                    b.HasOne("Models.Tables.EmployeeInstance", null)
                        .WithMany()
                        .HasForeignKey("EmployeeInstancesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Tables.HotelInstance", null)
                        .WithMany()
                        .HasForeignKey("HotelInstancesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Tables.Award", b =>
                {
                    b.HasOne("Models.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Tables.CheckInRecord", b =>
                {
                    b.HasOne("Models.Tables.ReserveOrder", "ReserveOrder")
                        .WithMany()
                        .HasForeignKey("ReserveOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Tables.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReserveOrder");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Models.Tables.HotelInstance", b =>
                {
                    b.HasOne("Models.Tables.CompanyGroup", "CompanyGroup")
                        .WithMany("HotelInstances")
                        .HasForeignKey("CompanyGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyGroup");
                });

            modelBuilder.Entity("Models.Tables.Order", b =>
                {
                    b.HasOne("Models.Tables.GuestRoom", "GuestRoom")
                        .WithMany()
                        .HasForeignKey("GuestRoomID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuestRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Tables.ReserveOrder", b =>
                {
                    b.HasOne("Models.Tables.Order", "Order")
                        .WithMany("ReserverOrders")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Tables.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Tables.Room", b =>
                {
                    b.HasOne("Models.Tables.HotelInstance", "HotelInstance")
                        .WithMany()
                        .HasForeignKey("HotelInstanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelInstance");
                });

            modelBuilder.Entity("Models.Tables.CompanyGroup", b =>
                {
                    b.Navigation("HotelInstances");
                });

            modelBuilder.Entity("Models.Tables.Order", b =>
                {
                    b.Navigation("ReserverOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
